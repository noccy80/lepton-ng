#!/usr/bin/php
<?php

require('sys/base.php');

ModuleManager::load('lepton.net.sockets');
ModuleManager::load('lepton.system.threading');
ModuleManager::load('lepton.system.delegates');

function threadfunc($id) {
	for($n = 0; $n < 5; $n++) { Console::debug('Thread %d tick %d', $id, $n); usleep(rand(1,1000)*1000); }
}

class MyThread extends Runnable {
	function threadmain($id) {
		Console::debug("This is thread %d reporting for duty.", $id);
	}
}

class ServiceTest extends ConsoleService {
	protected $arguments = 'hD';
	function main($argc,$argv) {
		if ($this->hasArgument('D')) {
			$this->fork();
		} else {
			$this->servicemain();
		}
		return 0;
	}
	function servicemain() {
		/*
		$s = new TcpSocket();
		$s->connect('linea.eani.net',80);
		if ($s->state == SOCKSTATE_CONNECTED) {
			$s->write("GET / HTTP/1.0\r\nhost: linea.eani.net\r\nuser-agent: leptonservice/1.0\r\n\r\n");
			while(true) { $data = $s->read(1024,$br); if ($data) break; }
			if ($br>0) Console::debug("Read %d bytes:\n%s", $br, $data);
		}
		$s->close();
		*/
		Console::debug("Waiting for thread to stop");
		while (($t1->isAlive()) || ($t2->isAlive()) || ($t3->isAlive())) $this->sleep(500);
		Console::debug("Okay, thread is done!");
	}
	function signal($sig) {
		Console::debug("Caught signal %d", $sig);
	}
	function usage() {
		Console::writeLn('Usage:     %s [-options] action [arguments]', $this->getName());
	}
}

Lepton::run('ServiceTest');
