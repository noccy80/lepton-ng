#!/usr/bin/php
<?php

require('sys/base.php');
using('lepton.graphics.capture');
using('lepton.system.threading');

class ScrintApplication extends ConsoleApplication {

	var $arguments = array(
		array('h','help','Show this help'),
		array('v','verbose','Be verbose'),
		array('o:','output','Output file'),
		array('d:','delay','Delay in seconds before capturing'),
		array('a:','after','Run application after capture, use %f for the filename'),
		array('m:','multi','Multi capture, specify two values for row and column separated by commas'),
		array('s:','size','Resize to, specify width and height separated by x'),
	);
	var $description = "Scrint! ScreenPrint Utility";

	function main($argc,$argv) {
		if ($this->hasArgument('o')) {
			if ($this->hasArgument('m')) {
				// Multi-capture
				list($row,$col) = explode(',',$this->getArgument('m'));
				if (!$this->hasArgument('s')) {
					console::writeLn("You need to specify the size of the screenshots with -s");
					return(1);
				}
				list($width,$height) = explode('x',$this->getArgument('s'));
				$count = $row * $col;
				$multi = true;
				$dest = new Canvas($width * $col, $height * $row);
			} else {
				$count = 1;
				$multi = false;
			}
			for($img = 0; $img < $count; $img++) {
				$file = $this->getArgument('o');
				if ($this->hasArgument('d')) {
					$delay = $this->getArgument('d');
					console::write("Waiting %d seconds", $delay);
					for($n = 0; $n < $delay; $n++) {
						sleep(1);
						console::write('.');
					}
					console::writeLn();
				}
				$sc = new Screenshot();
				if ($multi) {
					$tr = floor($img / $col); $tc = $img - ($tr * $col);
					$sc->resize($width,$height);
					$sc->draw($dest,$tc*$width,$tr*$height,$width,$height);
				} else {
					$dest = $sc;
				}
			}
			console::write("Saving to %s: ", $file);
			$dest->saveImage($file);
			console::writeLn("Done");
			if ($this->hasArgument('a')) {
				$cmd = $this->getArgument('a');
				$cmd = str_replace('%f','"'.$file.'"',$cmd);
				console::writeLn("Invoking %s...", $cmd);
				$exec = new Thread(new AsyncProcess($cmd));
				$exec->start();
			}
		} else {
			$this->usage();
		}
	}

}

class AsyncProcess extends Runnable {
	private $cmd = null;
	function __construct($cmd) {
		$this->cmd = $cmd;
	}
	function threadmain() {
		if ($this->cmd) {
			shell_exec($this->cmd);
		} else {
			console::writeLn("Nothing to do for AsyncProcess...");
		}
	}
}

lepton::run('ScrintApplication');
