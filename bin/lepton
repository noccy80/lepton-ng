#!/usr/bin/php
<?php

require('sys/base.php');



ModuleManager::load('lepton.console.readline');
ModuleManager::load('lepton.utils.tokenizer');
ModuleManager::load('lepton.base.cmd.*');

class LeptonUtil extends ConsoleApplication {
	protected $arguments = 'hil:';
	protected $version = '1.0';
	function interactiveMode() {
		Console::writeLn(__astr("\b{Lepton Management Utility} \c{ltgray v%s}"), $this->version);
		Console::writeLn(__astr("(c) 2010, NoccyLabs.info"));

		while($cmds = Readline::read(__astr('\c{ltgreen lepton}\c{ltblue >} '))) {
			Console::write(__astr('\b{}'));
			$t = new ArgumentTokenizer($cmds);
			$cmd = $t->getTokens();
			switch($cmd[0]) {
				case 'exit':
				case 'quit':
					return;
					break;
				default:
					$this->doCommand($cmd);
			}
			Readline::addHistory($cmds);
		}
	}
	function doCommand($cmd) {
		foreach(config::get('lepton.cmd.actionhandlers') as $handler) {
			if (method_exists($handler,$cmd[0])) {
				call_user_func_array(array($handler,$cmd[0]), array_slice($cmd,1));
				return;
			}
		}
		if ($cmd == true) return;
		Console::warn("No such command: %s", $cmd[0]);

	}
	function main($argc,$argv) {

		if ($this->hasArgument('l')) ModuleManager::load($this->getArgument('l'));

		if ($this->hasArgument('i')) return $this->interactiveMode();

		if ($this->getParameterCount() == 0) {
			$this->usage();
			return 1;
		}

		$this->doCommand($this->getParameterSlice(0));

		return 0;
	}
	function usage() {
		Console::writeLn('Usage:     %s [-options] command [arguments]', $this->getName());
		Console::writeLn();
		Console::writeLn('Options:   -q          Quiet, show no info');
		Console::writeLn('           -h          Show help');
		Console::writeLn('           -o file     Output file (when exporting)');
		Console::writeLn('           -i file     Input file (when importing)');
		Console::writeLn('           -l ns       Load module or namespace');
		Console::writeLn();
		Console::writeLn('Actions:   Use \'help\' to see the actions available');
	}
}

return Lepton::run('LeptonUtil');
