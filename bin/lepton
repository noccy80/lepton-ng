#!/usr/bin/php
<?php

require('sys/base.php');

class LeptonUtil extends ConsoleApplication {
	protected $arguments = 'h';
	function main($argc,$argv) {
		if ($this->getParameterCount() == 0) {
			$this->usage();
			return 1;
		}
		switch(strtolower($this->getParameter(0))) {
			case 'deploy':
				Console::writeLn("Deploying instance...");
				break;
			case 'initialize':
				Console::write("Single or Multi domain site? [S/m] "); $mode = Console::readLn();
				Console::write("  Base domain name (for routing): "); $dombase = Console::readLn();
			
				Console::write("Creating folder structure ... ");
				Console::status("app             ");
				usleep(50000);
				Console::status("app/config      ");
				usleep(50000);
				Console::status("app/controllers ");
				usleep(50000);
				Console::status("app/models      ");
				usleep(50000);
				Console::status("app/views       ");
				usleep(50000);
				Console::status("res             ");
				usleep(50000);
				Console::writeLn("Done            ");

				Console::write("Copying files ... ");
				Console::writeLn("39 of 39");

				Console::write("Checking configuration ... ");
				Console::writeLn("Ok");
				Console::write("Do you want a htconf too? [y/N] ");
				$w = Console::readLn();
				break;
			case 'export':
				Console::writeLn("Exporting site to archive...");
				break;
			case 'import':
				break;
			case 'config':
				Console::write("Reading configuration metadata ... ");
				Console::status('dbx           '); sleep(1);
				Console::status('dbx.db        '); sleep(1);
				Console::status('dbx.db.mysql  '); sleep(1);
				Console::writeLn('done          ');
				Console::writeLn("Parsing configuration file ... done");
				Console::writeLn("Preparing options ... done");
				break;
			case 'info':
				switch($this->getParameter(1)) {
				case 'pdo':
					Console::writeLn("Installed PDO drivers:");
					foreach(PDO::getAvailableDrivers() as $driver) {
						Console::writeLn("  %s", $driver);
					}
					break;
				case 'php':
					$info = array(
						'php_uname()' => php_uname('a'),
						'phpversion()' => phpversion(),
						'php_sapi_name()' => php_sapi_name(),
						'PHP_OS' => PHP_OS,
						'DIRECTORY_SEPARATOR' => DIRECTORY_SEPARATOR,
						'PATH_SEPARATOR' => PATH_SEPARATOR,
						'PHP_SHLIB_SUFFIX' => PHP_SHLIB_SUFFIX,
						'sys_get_temp_dir()' => sys_get_temp_dir()
					);
					$comp = array(
						'COMPAT_GETOPT_LONGOPTS' => (PHP_VERSION >= "5.3")?'Supported':'Emulated (PHP >= 5.3)',
						'COMPAT_SOCKET_BACKLOG' => (PHP_VERSION >= "5.3.3")?'Supported':'Missing (PHP >= 5.3.3)',
						'COMPAT_HOST_VALIDATION' => (PHP_VERSION >= "5.2.13")?'Supported':'Emulated (PHP >= 5.2.13)',
						'COMPAT_NAMESPACES' => (PHP_VERSION >= "5.3.0")?'Supported':'Missing (PHP >= 5.3.0)',
						'COMPAT_INPUT_BROKEN' => ((PHP_VERSION >= "5") && (PHP_VERSION < "5.3.1"))?'php://input possibly broken (PHP >= 5, PHP < 5.3.1)':'Functional',
						'COMPAT_CALLSTATIC' => (PHP_VERSION >= "5.3.0")?'Supported':'Missing (PHP >= 5.3.0)',
						'COMPAT_CRYPT_BLOWFISH' => (PHP_VERSION >= "5.3.0")?'Supported':'Missing (PHP >= 5.3.0)'
					);
					Console::writeLn("PHP Overview:");
					foreach($info as $key=>$val) {
						Console::writeLn("  %-25s : %s", $key, $val);
					}
					Console::writeLn("Compatibility layer overview:");
					foreach($comp as $key=>$val) {
						Console::writeLn("  %-25s : %s", $key, $val);
					}
					break;
				default:
					Console::writeLn("Use as %s info <section> where section is one of:", $this->getName());
					Console::writeLn("  php       Information on PHP environment and OS");
					Console::writeLn("  pdo       Information on PDO drivers");
					break;
				}
				break;
			case 'exception':
				throw new Exception("This is a new exception");
				break;
			default:
				$this->usage();
				return 1;
		}
		return 0;
	}
	function usage() {
		Console::writeLn('Usage:     %s [-options] action [arguments]', $this->getName());
		Console::writeLn();
		Console::writeLn('Options:   -q          Quiet, show no info');
		Console::writeLn('           -h          Show help');
		Console::writeLn('           -o file     Output file (when exporting)');
		Console::writeLn('           -i file     Input file (when importing)');
		Console::writeLn();
		Console::writeLn('Actions:   deploy      Deploy a lepton MVC structure in the current folder');
		Console::writeLn('           initialize  Initializes a new Lepton deployment');
		Console::writeLn('           scaffold    Scaffolds the database and imports any data');
		Console::writeLn('           export      Export the entire site into a .tgz file');
		Console::writeLn('           import      Import a site from a .tgz file');
		Console::writeLn('           config      Configure interactively');
		Console::writeln('           info        Show information');
	}
}

return Lepton::run('LeptonUtil');
