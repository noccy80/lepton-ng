#!/usr/bin/php
<?php

require('sys/base.php');
using('lunit.lunit');
using('lunit.reporters.*');

class LunitApplication extends ConsoleApplication implements ILunitStatusCallback {

	var $major = 1;
	var $minor = 0;
	var $arguments = array(
		array('h','help','Show this help'),
		array('t:','tests','Load tests from, comma separated (default: app.tests.*)'),
		array('r:','reporter','Specify the reporter to use (default:none)'),
		array('f:','file','File to write the report to (default:report.txt)'),
		array('d','database','Log information to database (use -t to define table)'),
		array('b:','table','Database table to log to with -d'),
	);
	var $description = 'Lunit Console Tester';
    
    function usage() {
        
        parent::usage();
        console::writeLn("Database Backing:        To save the test results to a database, use the -d option");
        console::writeLn("                         on the command line. The data will be written to the");
        console::writeLn("                         system database, or the database defined with the key");
        console::writeLn("                         lunit.database in the configuration.");
        
    }

	function main($argc,$argv) {

		console::writeLn("Lunit Runner v%d.%d", $this->major, $this->minor);
		console::writeLn("(c) 2001-2011, NoccyLabs. Distributed under GPL v2 or later");
		console::writeLn();
	
		$tests = 'app.tests.*';
		if ($this->hasArgument('t')) $tests = $this->getArgument('t');
		$tests = explode(',',$tests);
		foreach($tests as $test) {
			console::writeLn(__astr("\b{::} Loading tests: \g{%s}"), $test);
			using($test);
		}
		
		$reporter = null;
		if ($this->hasArgument('r')) $reporter = $this->getArgument('r');
		if ($reporter) {
			$reportfile = 'report.txt';
			if ($this->hasArgument('f')) $reportfile = $this->getArgument('f');
			console::writeLn(__astr("\b{::} Loading reporter: \g{%s}"), $reporter);
			$rep = new $reporter();
		}
		console::writeLn();

		$lur = new LunitRunner();
		$lur->setStatusCallback($this);
		if ($this->hasArgument('d')) {
			$t = $this->getArgument('b','lunit');
			$lur->setDatabaseLogger(new LunitDatabaseLogger($t));
		}
		$lur->run();
		
		if ($reporter && $rep) {
			console::writeLn(__astr("\b{::} Creating report: \g{%s}"), $reportfile);
			$rep->report($lur, $reportfile);
		
		}
	}

	function onCaseBegin($name,$meta) {
		console::writeLn(__astr('\b{::} \b{Running case} \g{%s}: %s'), $name, $meta['description']);
	}

	function onCaseEnd() {
		console::writeLn();
	}

	function onTestBegin($name,$meta) {
		console::write(__astr('   \g{%-20s} %-50s '), $name, $meta['description']);
	}

	function onTestEnd($status,$message) {
		if ($status === true) {
			console::writeLn(__astr('[\c{green PASS}]'));
		} elseif ($status === null) {
			console::writeLn(__astr('[\c{yellow SKIP}]'));
		} else {
			console::writeLn(__astr('[\c{red FAIL}]'));
			console::writeLn(__astr('     (\g{%s})'), $message);
		}
	}

}

Lepton::run('LunitApplication');
